# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/roles', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Role. As you add validations to Role, be sure to
  # adjust the attributes here as well.
  before(:each) do
    @current_user = create(:user, status: 'active', user_type: 'admin')
    sign_in(@current_user)
    @permission = create(:permission)
  end
  let(:valid_attributes) { { name: Faker::Name.name, company_id: @current_user.company.id } }
  let(:invalid_attributes) { { name: '', company_id: @current_user.company.id } }

  describe 'GET #new' do
    it 'renders a successful response' do
      get new_role_url
      expect(response).to be_successful
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new role' do
        expect do
          post roles_url, params: { role: valid_attributes.merge(permission_ids_input: [@permission.id]) }
        end.to change(Role, :count).by(1)
      end

      it 'redirects to new_user_path for HTML format' do
        post roles_url, params: { role: valid_attributes.merge(permission_ids_input: [@permission.id]) }
        expect(response).to redirect_to(new_user_path)
      end
    end

    context 'with invalid params' do
      it 'does not create a new Role' do
        expect do
          post roles_url,
               params: { role: invalid_attributes.merge(permission_ids_input: [@permission.id]) }
        end.to_not change(Role, :count)
      end

      it 'renders new template for HTML format' do
        post roles_url, params: { role: invalid_attributes.merge(permission_ids_input: [@permission.id]) }
        expect(response).to render_template(:new)
      end
    end
  end
end
