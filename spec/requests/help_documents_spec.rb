# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/help_documents', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # HelpDocument. As you add validations to HelpDocument, be sure to
  # adjust the attributes here as well.
  before(:each) do
    @current_user = create(:user)
    sign_in(@current_user)
  end

  let(:valid_attributes) do
    {
      name: Faker::Name.name, file: Rack::Test::UploadedFile.new('spec/fixtures/ISOFTSTUDIOS.png'),
      company_id: @current_user.company_id
    }
  end

  let(:invalid_attributes) do
    { name: nil, file: Rack::Test::UploadedFile.new('spec/fixtures/no-image.zip') }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      HelpDocument.create! valid_attributes
      get help_documents_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      help_document = HelpDocument.create! valid_attributes
      get help_document_url(help_document)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_help_document_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      help_document = HelpDocument.create! valid_attributes
      get edit_help_document_url(help_document)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new HelpDocument' do
        expect do
          post help_documents_url, params: { help_document: valid_attributes }
        end.to change(HelpDocument, :count).by(1)
      end

      it 'redirects to all help_documents' do
        post help_documents_url, params: { help_document: valid_attributes }
        expect(response).to redirect_to(help_documents_url)
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new HelpDocument' do
        expect do
          post help_documents_url, params: { help_document: invalid_attributes }
        end.to change(HelpDocument, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post help_documents_url, params: { help_document: invalid_attributes }
        expect(response).to render_template(:new)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        {
          name: Faker::Name.name, file: Rack::Test::UploadedFile.new('spec/fixtures/ISOFTSTUDIOS.png'),
          company_id: @current_user.company_id
        }
      end

      it 'updates the requested help_document' do
        help_document = HelpDocument.create! valid_attributes
        patch help_document_url(help_document), params: { help_document: new_attributes }
        help_document.reload
        expect(response).to be_redirect
        expect(flash[:notice]).to eq('Help document was successfully updated.')
      end

      it 'redirects to the help_document' do
        help_document = HelpDocument.create! valid_attributes
        patch help_document_url(help_document), params: { help_document: new_attributes }
        help_document.reload
        expect(response).to redirect_to(help_document_url(help_document))
      end
    end

    context 'with invalid parameters' do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        help_document = HelpDocument.create! valid_attributes
        patch help_document_url(help_document), params: { help_document: invalid_attributes }
        expect(response).to render_template(:edit)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested help_document' do
      help_document = HelpDocument.create! valid_attributes
      expect do
        delete help_document_url(help_document)
      end.to change(HelpDocument, :count).by(-1)
    end

    it 'redirects to the help_documents list' do
      help_document = HelpDocument.create! valid_attributes
      delete help_document_url(help_document)
      expect(response).to redirect_to(help_documents_url)
    end
  end
end
