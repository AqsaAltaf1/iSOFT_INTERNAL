# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/company_assets', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # CompanyAsset. As you add validations to CompanyAsset, be sure to
  # adjust the attributes here as well.
  before(:each) do
    @company = create(:company, status: 'active')
    @current_user = create(:user, company_id: @company.id, status: 'active', user_type: 'admin')
    sign_in(@current_user)
  end
  let(:valid_attributes) do
    @user = create(:user, user_type: 'admin', company_id: @company.id, status: 'active')
    {
      name: Faker::Name.name,
      unique_identifier: Faker::Alphanumeric.alpha(number: 10),
      purchase_date: Date.today,
      status: CompanyAsset.statuses.keys.sample,
      user_id: @user.id, company_id: @company.id,
      added_by: @current_user
    }
  end

  let(:invalid_attributes) do
    { name: nil, user_id: nil, unique_identifier: Faker::Alphanumeric.alpha(number: 10), company_id: nil }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      CompanyAsset.create! valid_attributes
      get company_assets_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      company_asset = CompanyAsset.create! valid_attributes
      get company_asset_url(company_asset)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_company_asset_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      company_asset = CompanyAsset.create! valid_attributes
      get edit_company_asset_url(company_asset)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new CompanyAsset' do
        expect do
          post company_assets_url, params: { company_asset: valid_attributes }
        end.to change(CompanyAsset, :count).by(1)
      end

      it 'redirects to the created company_asset' do
        post company_assets_url, params: { company_asset: valid_attributes }
        expect(response).to redirect_to(company_assets_url)
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new CompanyAsset' do
        expect do
          post company_assets_url, params: { company_asset: invalid_attributes }
        end.to change(CompanyAsset, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post company_assets_url, params: { company_asset: invalid_attributes }
        expect(response).to render_template(:new)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        {
          name: Faker::Name.name,
          unique_identifier: Faker::Alphanumeric.alpha(number: 10),
          purchase_date: Date.today,
          status: CompanyAsset.statuses.keys.sample,
          user_id: @user.id, company_id: @company.id,
          added_by: @current_user
        }
      end

      it 'updates the requested company_asset' do
        company_asset = CompanyAsset.create! valid_attributes
        patch company_asset_url(company_asset), params: { company_asset: new_attributes }
        company_asset.reload
        expect(response).to be_redirect
        expect(flash[:notice]).to eq('Company asset is successfully updated.')
      end

      it 'redirects to the company_assets' do
        company_asset = CompanyAsset.create! valid_attributes
        patch company_asset_url(company_asset), params: { company_asset: new_attributes }
        company_asset.reload
        expect(response).to redirect_to(company_assets_url)
      end
    end

    context 'with invalid parameters' do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        company_asset = CompanyAsset.create! valid_attributes
        patch company_asset_url(company_asset), params: { company_asset: invalid_attributes }
        expect(response).to render_template(:edit)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested company_asset' do
      company_asset = CompanyAsset.create! valid_attributes
      expect do
        delete company_asset_url(company_asset)
      end.to change(CompanyAsset, :count).by(-1)
    end

    it 'redirects to the company_assets list' do
      company_asset = CompanyAsset.create! valid_attributes
      delete company_asset_url(company_asset)
      expect(response).to redirect_to(company_assets_url)
    end
  end
end
